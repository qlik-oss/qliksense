name: Qliksense
version: 0.5.0
description: "Qliksense application cnab bundle"
invocationImage: qlik/qliksense-cnab-invocation:v0.5.0
tag: qlik/qliksense-cnab-bundle:v0.5.0

dockerfile: Dockerfile.tmpl

mixins:
  - kustomize
  - qliksense
  - kubernetes
  - exec

credentials:
  - name: kubeconfig
    path: /root/.kube/config
    description: "The .kubeconfig file to connect to k8s cluster"
    required: false

parameters:
  - name: acceptEULA
    type: string
    description: "User has to accept End User License Aggrement's term to install Qliksense"
    default: "no"
    applyTo:
    - install
    - upgrade
  - name: profile
    type: string
    description: "Select a profile i.e docker-desktop, aws-eks, gke, azure. default is docker-desktop"
    default: docker-desktop
  - name: mongoDbUri
    description: "The mongodb uri to connect"
    type: string
    default: "mongodb://qliksense-mongodb:27017/qliksense?ssl=false"
  - name: scName
    description: "Storage Class Name to be used in PVCs"
    type: string
    default: ""
  - name: namespace
    description: "Which namespace the qliksense will be installed"
    type: string
    default: ""
  - name: rotateKeys
    description: "Rotate all application keys"
    type: string
    default: "no"
    applyTo:
      - upgrade
  - name: dockerRegistry
    description: "Push images/use specified docker registry"
    type: string
    default: ""
    applyTo:
      - install
      - upgrade
    
outputs:
- name: LoadBalancer
  description: "Ingress LoadBalancer hostname"
  type: string
  applyTo:
  - install

customActions:
  about:
    description: "About Qlik Sense"
    stateless: true
    modifies: false
  preflight:
    description: "Run preflight checks"
    stateless: true
    modifies: false

about:
  - qliksense:
      description: "Use bundled version by default"
      version: "bundled"
preflight:
  - exec:
      description: "Running preflight checks.."
      command: bash
      flags:
        c: /cnab/app/preflight.sh -n {{ bundle.parameters.namespace }}
install:
  - qliksense:
      description: "Installing: Creating patch based on CR"
      name: qliksense-operator
      cr:
        dockerRegistry: "{{ bundle.parameters.dockerRegistry }}"
        manifestsRoot: "/cnab/app"
        configs:
        - dataKey: acceptEULA
          values:
            qliksense: "{{ bundle.parameters.acceptEULA }}"
        secrets:
        - secretKey: mongoDbUri
          values:
            qliksense: "{{ bundle.parameters.mongoDbUri }}"
        storageClassName: "{{ bundle.parameters.scName }}"
        namespace: "{{ bundle.parameters.namespace }}"
        rotateKeys: "yes"
  - kustomize:
      description: "Installing: Use Kustomize to generate CRD for Qliksense"
      name: CRD-install
      kustomization_input:
          - "manifests/base/manifests/qliksense-init/"
      kubernetes_manifest_output: manifests/base/manifests/
  - kubernetes:
      description: "Installing: run Kubernetes to create CRD resource"
      manifests:
        - manifests/base/manifests/
      wait: true
      validate: false
  - kustomize:
      description: "Installing: Use Kustomize to generate the k8s resources for Qliksense"
      name: qliksense-install
      kustomization_input:
          - "manifests/{{ bundle.parameters.profile }}"
      kubernetes_manifest_output: manifests/
  - kubernetes:
      description: "Installing: run Kubernetes to create k8s resource"
      manifests:
        - manifests/
      wait: true
      validate: false
      outputs:
        - name: LoadBalancer
          resourceType: service
          resourceName: qliksense-elastic-infra-nginx-ingress-controller
          jsonPath: "{.status.loadBalancer.ingress[0].hostname}"
upgrade:
  - qliksense:
      description: "Upgrading: Creating patch based on CR"
      name: qliksense-operator
      cr:
        manifestsRoot: "/cnab/app"
        dockerRegistry: "{{ bundle.parameters.dockerRegistry }}"
        configs:
        - dataKey: acceptEULA
          values:
            qliksense: "{{ bundle.parameters.acceptEULA }}"
        secrets:
        - secretKey: mongoDbUri
          values:
            qliksense: "{{ bundle.parameters.mongoDbUri }}"
        storageClassName: "{{ bundle.parameters.scName }}"
        rotateKeys: "{{ bundle.parameters.rotateKeys }}"
  - kustomize:
      description: "Upgrading: Use Kustomize to generate the k8s resources for Qliksense"
      name: "upgrade qliksense"
      kustomization_input:
          - "manifests/{{ bundle.parameters.profile }}"
      kubernetes_manifest_output: manifests/
  - kubernetes:
      description: "Upgrading: run Kubernetes to create/upgrade k8s resource"
      manifests:
        - manifests/
      wait: true
      validate: false

uninstall:
  - exec:
      description: "Uninstalling: delete all qliksense resources"
      command: kubectl
      arguments:
      - delete
      - deployment,services,statefulset,ingress,configmap,secrets,role,serviceaccount,rolebinding,pvc,crd,cronjob
      flags:
        l: release=qliksense
