version: 2.0
jobs:
  bundle-release:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Install-porter
          command: |
            sudo add-apt-repository ppa:rmescandon/yq && sudo apt-get update && sudo apt install yq -y
            docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
            curl https://cdn.deislabs.io/porter/latest/install-linux.sh | bash
      - run:
          name: Installing-mixins
          command: |
            export PATH=$PATH:~/.porter
            porter mixin install kustomize -v 0.2-beta-3-0e19ca4 --url https://github.com/donmstewart/porter-kustomize/releases/download
            porter mixin install qliksense -v v0.16.0 --url https://github.com/qlik-oss/porter-qliksense/releases/download
      - run:
          name: Add Invocation image label
          command: |
            INSTALLER_VER=$(yq r dependencies.yaml '[org.qlik.operator.cli.sense-installer.version.min]')
            PORTER_VER=$(yq r dependencies.yaml '[org.qlik.operator.cli.porter.version.min]')
            MIXIN_VER=$(yq r dependencies.yaml '[org.qlik.operator.mixin.qliksense.version.min]')
            QSEOK_VER=$(yq r dependencies.yaml '[org.qlik.qseok.version]')
            STREAM=$(yq r dependencies.yaml '[org.qlik.stream]')
            cat Dockerfile.tmpl | sed "s/INSTALLER_VER/$INSTALLER_VER/g" | sed "s/PORTER_VER/$PORTER_VER/g" | sed "s/MIXIN_VER/$MIXIN_VER/g" | sed "s/QSEOK_VER/$QSEOK_VER/g" | sed "s/STREAM/$STREAM/g" | sed "s/# LABEL/LABEL/g" > tmp_Dockerfile.tmpl
            mv tmp_Dockerfile.tmpl Dockerfile.tmpl
      - run:
          name: porter-build-publish
          command: |
            export PATH=$PATH:~/.porter
            porter build -v
            porter publish
      - run:
          name: porter-build-publish-latest
          command: |
            export PATH=$PATH:~/.porter
            errno=0 && (echo $CIRCLE_TAG | grep -iv edge > /dev/null) || errno=$?
            if [[ ${errno} -ne 0 ]]; then
              cat porter.yaml | sed -r 's/:v[0-9]+.[0-9]+.[0-9]+[-edge]+/:latest/g' > porter.tmpl.yaml
              mv porter.tmpl.yaml porter.yaml
              porter build -v
              porter publish
            fi
  qliksense-install-openshift:
    working_directory: ~/src
    docker:
      - image: qliktech-docker.jfrog.io/openshift-cluster-aws
        auth:
          username: $RT_USERNAME
          password: $RT_APIKEY
    environment:
      CLUSTER_NAME: openshift-ci
      REGION: us-east-1
      TARGET_PLATFORM: openshift
      PIPELINE_NAME: qliksense-integration-ci-openshift
      KEYVAL_FILE: .keyval_file
      USE_BASTION: "true"
    steps:
      - checkout
      - run:
          name: Set up workspace
          command: |
            mkdir -p /workspace
      - run:
          name: setup-isolated-namespace
          shell: /bin/bash
          command: |
            if [ ! -f "$KEYVAL_FILE" ]
            then
              touch $KEYVAL_FILE
            fi

            export BASTION_PRIVATE_KEY=$OPENSHIFT_BASTION_PRIVATE_KEY
            export SERVICE_ACCOUNT_NAME=$OPENSHIFT_SERVICE_ACCOUNT_NAME
            export SERVICE_ACCOUNT_TOKEN=$OPENSHIFT_SERVICE_ACCOUNT_TOKEN

            # Login to the K8 cluster on the target platform
            ./ci/scripts/cluster-login.sh

            # Create and configure a unique namespace
            ./ci/scripts/install-namespace.sh

            # Save generated namespace in workspace
            cat $KEYVAL_FILE > /workspace/generated_namespace
      - run:
          name: watch-pods
          shell: /bin/bash
          background: true
          command: |
            # Run check pod (check if pods are running and ready)
            ./ci/scripts/watch-pods.sh
      - run:
          name: qliksense-test-bump
          shell: /bin/bash
          command: |
            # Init helm tiller service account and add helm repos
            ./ci/scripts/helm-init.sh

            export HOSTNAME="qliksense-elastic-infra-nginx-ingress-controller"
            export BASE_PATH="/root/src"
            ./ci/scripts/qliksense-generate-certs.sh

            ./ci/scripts/qliksense-simple-oidc.sh

            # Install qliksense using operator + kustomize
            ./ci/scripts/qliksense-install.sh
      - run:
          name: check-pods-are-ready
          shell: /bin/bash
          command: |
            # Run check pod (check if pods are running and ready)
            ./ci/scripts/check-pods.sh
      - run:
          name: export-pod-logs
          shell: /bin/bash
          when: on_fail
          command: |
            ./ci/scripts/export-pod-logs.sh
      - run:
          name: namespace-cleanup
          shell: /bin/bash
          no_output_timeout: 20m
          when: on_fail
          command: |
            # Cleanup namespace if exits
            ./ci/scripts/delete-namespace.sh
      - store_artifacts:
          path: /tmp/podlogs
          destination: podlogs
      - persist_to_workspace:
          root: /workspace
          paths:
            - generated_namespace

  qliksense-system-test-openshift:
    working_directory: ~/src
    docker:
      - image: qliktech-docker.jfrog.io/openshift-cluster-aws
        auth:
          username: $RT_USERNAME
          password: $RT_APIKEY
    environment:
      CLUSTER_NAME: openshift-ci
      REGION: us-east-1
      TARGET_PLATFORM: openshift
      PIPELINE_NAME: qliksense-integration-ci-openshift
      KEYVAL_FILE: .keyval_file
      USE_BASTION: "true"
    steps:
      - checkout
      - attach_workspace:
          at: /workspace
      - run:
          name: cluster-login
          shell: /bin/bash
          command: |
            if [ ! -f "$KEYVAL_FILE" ]
            then
              touch $KEYVAL_FILE
              cat /workspace/generated_namespace >> "$KEYVAL_FILE"
            fi

            export BASTION_PRIVATE_KEY=$OPENSHIFT_BASTION_PRIVATE_KEY
            export SERVICE_ACCOUNT_NAME=$OPENSHIFT_SERVICE_ACCOUNT_NAME
            export SERVICE_ACCOUNT_TOKEN=$OPENSHIFT_SERVICE_ACCOUNT_TOKEN

            # Login to the K8 cluster on the target platform
            ./ci/scripts/cluster-login.sh

            # Init helm tiller service account and add helm repos
            ./ci/scripts/helm-init.sh
      - run:
          name: run-system-test
          shell: /bin/bash
          no_output_timeout: 15m
          command: |
            # Running system test
            ./ci/scripts/run-system-test.sh
      - store_artifacts:
          path: /tmp/system-test-reports
          destination: system-test-reports
      - run:
          name: export-pod-logs
          shell: /bin/bash
          when: on_fail
          command: |
            ./ci/scripts/export-pod-logs.sh
      - run:
          name: namespace-cleanup
          shell: /bin/bash
          no_output_timeout: 20m
          when: always
          command: |
            # Cleanup namespace if exits
            ./ci/scripts/delete-namespace.sh
      - store_artifacts:
          path: /tmp/podlogs
          destination: podlogs

workflows:
  version: 2
  publish:
    jobs:
      - qliksense-install-openshift:
          filters:
            branches:
              ignore: master
      - qliksense-system-test-openshift:
          requires:
            - qliksense-install-openshift
          filters:
            branches:
              ignore:
                - master
      - bundle-release:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/