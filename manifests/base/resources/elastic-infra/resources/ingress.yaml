apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://elastic-infra-edge-auth.$(NAMESPACE).svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers 'Access-Control-Allow-Origin: $http_origin';
      more_set_headers 'Access-Control-Allow-Methods: GET, PUT, POST, DELETE, PATCH, OPTIONS';
      if ($request_method = 'OPTIONS') {
        more_set_headers 'Access-Control-Max-Age: 1728000';
        more_set_headers 'Content-Type: text/plain charset=UTF-8';
        more_set_headers 'Content-Length: 0';
        return 204;
      }
      return 404;
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/server-snippet: |
      opentracing on;
      gzip on;
      gzip_min_length 10240;
      gzip_proxied expired no-cache no-store private auth;
      gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
      gzip_disable msie6;
      server_tokens off;

      # Do not store anything in cache unless specific location overrides
      more_set_headers "Cache-Control: no-store" "Pragma: no-cache";

      # Enforce HSTS
      more_set_headers "Strict-Transport-Security: max-age=15724800; includeSubDomains";



      # The following custom auth block is required so we can have a reliable auth path for engine load balancing (below)
      location = /_external-auth-engine {
        internal;

        proxy_pass_request_body     off;
        proxy_set_header            X-Forwarded-Proto "";

        proxy_set_header            Host                    edge-auth.$(NAMESPACE).svc.cluster.local;
        proxy_set_header            X-Original-URL          $scheme://$http_host$request_uri;
        proxy_set_header            X-Original-Method       $request_method;
        proxy_set_header            X-Sent-From             "nginx-ingress-controller";
        proxy_set_header            X-Real-IP               $remote_addr;

        proxy_set_header            X-Forwarded-For        $remote_addr;

        proxy_set_header            X-Auth-Request-Redirect $request_uri;

        proxy_buffering                         off;
        proxy_buffer_size                       4k;
        proxy_buffers                           4 4k;
        proxy_request_buffering                 on;

        proxy_http_version          1.1;
        proxy_ssl_server_name       on;
        proxy_pass_request_headers  on;

        client_max_body_size        "1m";

        # Pass the extracted client certificate to the auth provider

        set $target http://$(PREFIX)-edge-auth.$(NAMESPACE).svc.cluster.local:8080/v1/auth;
        opentracing_propagate_context;
        proxy_pass $target;
      }

      # The following is for dataprepservice as a load balancer
      location = /_dataprepservice_special {
        internal;

        proxy_set_header            Content-Type "application/json";

        set $target http://$(PREFIX)-data-prep.$(NAMESPACE).svc.cluster.local:9072/session/route;
        opentracing_propagate_context;
        proxy_pass $target;
      }

      # This block is for app open websocket upgrade requests. It calls qix-sessions to get an engine
      # session and then proxies the websocket upgrade to the returned engine.
      #
      # Here are some example paths that would match this location.
      #   /app/%3Ftransient%3D
      #   /app/a774322d-8230-4688-b459-3e037d53a560
      #   /app/a774322d-8230-4688-b459-3e037d53a560/identity/36fec6a7-61c5-41ba-b9f5-76997a53a82c
      #   /app/SessionApp_a774322d-8230-4688-b459-3e037d53a560
      #   /app/SessionApp_a774322d-8230-4688-b459-3e037d53a560/identity/36fec6a7-61c5-41ba-b9f5-76997a53a82c
      #   /qvapp/a774322d-8230-4688-b459-3e037d53a560
      #   /qvapp/a774322d-8230-4688-b459-3e037d53a560/identity/36fec6a7-61c5-41ba-b9f5-76997a53a82c
      #
      # Note that location does not contain the query string (e.g. ?example1=true&example2=yes).
      # This golang regex tester is good for testing changes to the localtion regex: https://regex101.com/.
      #
      # ^/app/(SessionApp_)?([a-zA-Z0-9\-]+|%3Ftransient%3D)(/identity/)?([a-zA-Z0-9\-]+)?.*|^/(qv)app/([a-zA-Z0-9\-])(/identity/)?([a-zA-Z0-9\-]+)?.*
      #
      location ~ ^/(qv)?app/(SessionApp_)?([a-zA-Z0-9\-]+|%3Ftransient%3D)(/identity/)?([a-zA-Z0-9\-]+)?.* {
        set $engine_path '';
        set $app_path $1;
        set $session_app $2;
        set $app_id $3;
        set $session_id $5;
        set $auth_path http://$(PREFIX)-edge-auth.$(NAMESPACE).svc.cluster.local:8080/v1/auth;
        set $qix_session_path http://$(PREFIX)-qix-sessions.$(NAMESPACE).svc.cluster.local:8080/v1/engine-sessions;

        access_by_lua_block {
          local bridge_tracer = require("opentracing_bridge_tracer")
          local tracer = bridge_tracer.new_from_global()
          local parent_context = tracer:binary_extract(ngx.var.opentracing_binary_context)
          local span = tracer:start_span("qix_sessions_lua_ws", {["references"] = { {"child_of", parent_context} } })

          local http = require "resty.http"
          local httpc = http.new()

          local headers = {}
          -- Copy incoming headers
          for h,v in pairs(ngx.req.get_headers()) do
              headers[h] = v
          end
          -- Set specific headers
          headers["X-Forwarded-Proto"] = ""
          headers["X-Original-URL"] = string.format("%s://%s%s", ngx.var.scheme, ngx.var.http_host, ngx.var.request_uri)
          headers["X-Original-Method"] = ngx.var.request_method
          headers["X-Original-Origin"] = ngx.var.http_origin
          headers["X-Sent-From"] = "nginx-ingress-controller"
          headers["X-Real-IP"] = ngx.var.the_real_ip
          headers["X-Forwarded-For"] = ngx.var.the_real_ip
          headers["X-Auth-Request-Redirect"] = ngx.var.request_uri
          headers["Host"] = "edge-auth.$(NAMESPACE).svc.cluster.local"
          headers["qlik-web-integration-id"] = ngx.req.get_uri_args()["qlik-web-integration-id"]
          tracer:http_headers_inject(span:context(), headers)

          -- Authenticate
          local authres, err = httpc:request_uri(ngx.var.auth_path, { headers = headers })

          if err then
            ngx.log(ngx.ERR, "error calling edge_auth: " .. tostring(err))
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          span:set_tag("auth.status", authres.status)
          if authres.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, authres.status .. " received from edge_auth")
            span:set_tag("error", true)
            span:finish()
            if authres.status == ngx.HTTP_UNAUTHORIZED or authres.status == ngx.HTTP_FORBIDDEN then
              ngx.exit(authres.status)
              return
            else
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              return
            end
          end

          -- Set upstream Authorization header
          ngx.req.set_header("Authorization", authres.headers["Authorization"])

          -- Find upstream engine

          local engReqBody = "{\"appId\":\"" .. ngx.var.app_id .. "\","

          if string.len(ngx.var.session_id) > 0 then
            engReqBody = engReqBody .. "\"id\":\"" .. ngx.var.session_id .. "\","
          end

          if "SessionApp_" == ngx.var.session_app then
            engReqBody = engReqBody .. "\"workloadType\":\"sessionapp\"}"
          else
            engReqBody = engReqBody .. "\"workloadType\":\"analyse\"}"
          end

          local reqHeaders = {}
          reqHeaders["Content-Type"] = "application/json"
          reqHeaders["Authorization"] = authres.headers["Authorization"]
          tracer:http_headers_inject(span:context(), reqHeaders)

          local qix_session_res, qix_session_err = httpc:request_uri(ngx.var.qix_session_path, {
            method = "POST",
            headers = reqHeaders,
            body = engReqBody
          })

          if qix_session_err then
            ngx.log(ngx.ERR, "error calling qix-sessions: " .. tostring(qix_session_err))
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          span:set_tag("qix.sessions.status", qix_session_res.status)
          if qix_session_res.status ~= ngx.HTTP_CREATED then
            ngx.log(ngx.ERR, qix_session_res.status .. " received from qix-sessions")
            span:set_tag("error", true)
            span:finish()
            ngx.exit(qix_session_res.status)
            return
          end

          local cjson = require "cjson";
          local qix_sessions_route_data = cjson.decode(qix_session_res.body);

          local engine_path = ""
          if qix_sessions_route_data.links.engineUrl.href then
            engine_path = qix_sessions_route_data.links.engineUrl.href .. "/TTL/120"
          else
            ngx.log(ngx.ERR, "invalid or empty engine path received from qix-sessions")
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          local app_placement_type = qix_sessions_route_data.placementDetails.appPlacementType
          local selectors = qix_sessions_route_data.placementDetails.selectors
          local selector_used = qix_sessions_route_data.placementDetails.selectorUsed
          local from_cache = tostring(qix_sessions_route_data.fromCache)
          local resp_value = ""

          local parsed_selectors = "[";
          if (type(selectors)) == "table" then
            for i,selector in ipairs(selectors) do
              parsed_selectors = parsed_selectors .. "\"" .. selector .. "\","
            end
            parsed_selectors = parsed_selectors:sub(1, -2)
          end
          parsed_selectors = parsed_selectors .. "]"

          if app_placement_type and parsed_selectors and selector_used then
            resp_value = "{\"appPlacementType\":\"" .. app_placement_type .. "\"," .. "\"selectors\":" .. parsed_selectors .. "," .. "\"selectorUsed\":\"" .. selector_used .. "\"," .. "\"fromCache\":\"" .. from_cache .. "\"}"
            ngx.header["Placement-Details"] = resp_value
          end

          ngx.var.engine_path = engine_path
          ngx.log(ngx.NOTICE, "forwarding request to url " .. engine_path)

          -- Some of these span tags should be logs but as soon as span:log_kv is called the qix_sessions_lua_ws span
          -- does not show up in jeager.
          -- Some of these span tags shoulg be set much earlier but if we do that, unsuccessful spans to edge auth or
          -- qix-sessions do not show up in jaeger.
          span:set_tag("engine.path", engine_path)
          span:set_tag("response.sessionId", qix_sessions_route_data.id)
          span:set_tag("selector", selector_used)
          span:set_tag("from.cache", from_cache)

          if "qv" == ngx.var.app_path then
            span:set_tag("resource.type", "qvapp")
          else
            span:set_tag("resource.type", "app")
          end
          span:set_tag("appId", ngx.var.app_id)
          span:set_tag("request.sessionId", ngx.var.session_id)
          if "SessionApp_" == ngx.var.session_app then
            span:set_tag("session.app", true)
          else
            span:set_tag("session.app", false)
          end
          span:finish()
        }

        proxy_set_header X-Real-IP $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_connect_timeout 7d;
        proxy_read_timeout 7d;
        proxy_send_timeout 7d;
        proxy_http_version 1.1;
        opentracing_propagate_context;
        proxy_pass $engine_path;
      }

      # This block controls the data-prep websocket LB and proxying logic
      location ~ ^/dataprepservice/app/(.+) {
        set $dps_path '';

        set $app_id $1;

        access_by_lua_block {
          local bridge_tracer = require("opentracing_bridge_tracer")
          local tracer = bridge_tracer.new_from_global()
          local parent_context = tracer:binary_extract(ngx.var.opentracing_binary_context)
          local span = tracer:start_span("dataprep_lua_ws", {["references"] = { {"child_of", parent_context} } })

          local headers = {}
          for h,v in pairs(ngx.req.get_headers()) do
              headers[h] = v
          end
          tracer:http_headers_inject(span:context(), headers)

          local authres = ngx.location.capture("/_external-auth-engine", { headers = headers })

          span:set_tag("auth.status", authres.status)
          if authres.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, authres.status .. " received from edge_auth")
            span:set_tag("error", true)
            span:finish()
            if authres.status == ngx.HTTP_UNAUTHORIZED or authres.status == ngx.HTTP_FORBIDDEN then
              ngx.exit(authres.status)
              return
            else
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              return
            end
          end

          -- Set upstream Authorization header
          ngx.req.set_header("Authorization", authres.header["Authorization"])

          local dpsHeaders = {}
          for h,v in pairs(ngx.req.get_headers()) do
              dpsHeaders[h] = v
          end
          dpsHeaders["Authorization"] = authres.header["Authorization"]
          tracer:http_headers_inject(span:context(), dpsHeaders)

          local reqBody = "{\"appId\":\"" .. ngx.var.app_id .. "\"}"
          local dps_res = ngx.location.capture("/_dataprepservice_special", {
            method = ngx.HTTP_POST,
            headers = dpsHeaders,
            body = reqBody
          })

          span:set_tag("data.prep.status", dps_res.status)
          if dps_res.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, "error from dataprepservice route request = " .. dps_res.status)
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          local cjson = require "cjson";
          local dps_route_data = cjson.decode(dps_res.body);
          local dps_path = dps_route_data.url
          if not dps_path then
            ngx.log(ngx.ERR, "invalid or empty path received from dataprepservice")
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          ngx.var.dps_path = string.format("%s/app/%s", dps_path, ngx.var.app_id)
          ngx.log(ngx.NOTICE, "forwarding dataprepservice WS request to url " .. ngx.var.dps_path)
          span:set_tag("data.prep.path", ngx.var.dps_path)
          span:finish()
        }

        proxy_set_header X-Real-IP $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_connect_timeout 7d;
        proxy_read_timeout 7d;
        proxy_send_timeout 7d;
        proxy_http_version 1.1;
        opentracing_propagate_context;
        proxy_pass $dps_path;
      }

      # This block controls the data-prep REST API LB and proxying logic
      location ~ ^/api/dataprepservice/v1/apps/([^/]*)/(.*) {
        set $dps_path '';
        set $auth_path http://$(PREFIX)-edge-auth.$(NAMESPACE).svc.cluster.local:8080/v1/auth;
        set $dps_route_path http://$(PREFIX)-data-prep.$(NAMESPACE).svc.cluster.local:9072/session/route;

        set $app_id $1;
        set $end_point $2;

        set $redir https://$best_http_host$request_uri;
        # enforce ssl on server side
        access_by_lua_block {
          local bridge_tracer = require("opentracing_bridge_tracer")
          local tracer = bridge_tracer.new_from_global()
          local parent_context = tracer:binary_extract(ngx.var.opentracing_binary_context)
          local span = tracer:start_span("dataprep_lua_rest", {["references"] = { {"child_of", parent_context} } })

          local function redirect_to_https()
            return ngx.var.pass_access_scheme == "http" and (ngx.var.scheme == "http" or ngx.var.scheme == "https")
          end

          if redirect_to_https() then
            span:finish()
            ngx.redirect(ngx.var.redir, ngx.HTTP_MOVED_PERMANETLY)
            return
          end

          local http = require "resty.http"
          local httpc = http.new()

          local random = math.random

          local function guid()
            local template ='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'
            return string.gsub(template, '[xy]', function (found)
              local gen = (found == 'x') and random(0, 0xf) or random(8, 0xb)
              return string.format('%x', gen)
            end)
          end

          local headers = {}
          for h,v in pairs(ngx.req.get_headers()) do
            headers[h] = v
          end
          headers["Host"] = "edge-auth.$(NAMESPACE).svc.cluster.local"
          headers["X-Original-URL"] = string.format("%s://%s%s", ngx.var.scheme, ngx.var.http_host, ngx.var.request_uri)
          headers["X-Original-Method"] = ngx.var.request_method
          headers["X-Sent-From"] = "nginx-ingress-controller"
          headers["X-Real-IP"] = ngx.var.the_real_ip
          headers["X-Forwarded-For"] = ngx.var.the_real_ip
          headers["X-Auth-Request-Redirect"] = ngx.var.request_uri
          headers["X-DataPrep-Lua-Request-ID"] = guid()
          tracer:http_headers_inject(span:context(), headers)

          local res, err = httpc:request_uri(ngx.var.auth_path, {
              headers = headers,
              method = "GET",
              version = 1.1,
              keepalive_timeout = 60,
              keepalive_pool = 10 })

          if err then
            local hdrStr = ""
            for key,value in pairs(headers) do
              if string.lower(key) ~= "cookie"  then
                hdrStr = hdrStr .. key .. ":" .. value .. " "
              end
            end
            ngx.log(ngx.ERR, "error calling edge_auth " .. tostring(err) .. " auth headers: " .. hdrStr .. " edge_auth URI: " .. ngx.var.auth_path)
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          span:set_tag("auth.status", res.status)
          if res.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, res.status .. " received from edge_auth")
            span:set_tag("error", true)
            span:finish()
            if res.status == ngx.HTTP_UNAUTHORIZED or res.status == ngx.HTTP_FORBIDDEN then
              ngx.exit(res.status)
              return
            else
              ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
              return
            end
          end

          -- Set upstream Authorization header
          ngx.req.set_header("Authorization", res.headers["Authorization"])

          local reqHeaders = {}
          reqHeaders["Content-Type"] = "application/json"
          reqHeaders["Authorization"] = res.headers["Authorization"]
          tracer:http_headers_inject(span:context(), reqHeaders)

          local reqBody = "{\"appId\":\"" .. ngx.var.app_id .. "\"}"

          local dps_res, dps_err = httpc:request_uri(ngx.var.dps_route_path, {
            method = "POST",
            headers = reqHeaders,
            body = reqBody
          })

          if dps_err then
            ngx.log(ngx.ERR, "error calling dataprepservice: " .. tostring(dps_err))
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          span:set_tag("data.prep.status", dps_res.status)
          if dps_res.status ~= ngx.HTTP_OK then
            ngx.log(ngx.ERR, "error from dataprepservice route request: " .. dps_res.status)
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          local cjson = require "cjson";
          local dps_route_data = cjson.decode(dps_res.body);
          local dps_path = dps_route_data.url
          if not dps_path then
            ngx.log(ngx.ERR, "invalid or empty path received from dataprepservice")
            span:set_tag("error", true)
            span:finish()
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
            return
          end

          local query_params = ngx.encode_args(ngx.req.get_uri_args())
          if query_params then
            query_params = "?" .. query_params
          end

          ngx.var.dps_path = string.format("%s/v1/apps/%s/%s%s", dps_path, ngx.var.app_id, ngx.var.end_point, query_params)
          ngx.log(ngx.NOTICE, "forwarding dataprepservice request to url " .. ngx.var.dps_path)
          span:set_tag("data.prep.path", ngx.var.dps_path)
          span:finish()
        }

        proxy_set_header X-Real-IP $proxy_protocol_addr;
        proxy_set_header X-Forwarded-For $proxy_protocol_addr;
        proxy_set_header X-Forwarded-Port 80;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header X-NginX-Proxy true;
        proxy_connect_timeout 7d;
        proxy_read_timeout 7d;
        proxy_send_timeout 7d;
        opentracing_propagate_context;
        proxy_pass $dps_path;
      }
    nginx.org/client-max-body-size: 500m
  labels:
    app: elastic-infra
    chart: elastic-infra-3.0.6
    heritage: Helm
    release: elastic-infra
  name: elastic-infra-elastic-infra-api-404
spec:
  rules:
    - http:
        paths:
          - backend:
              serviceName: elastic-infra-nginx-ingress-controller
              servicePort: 80
            path: /api
---
